import * as React from 'react';
import { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps } from '@nivo/core';
import { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors';
import { LegendProps } from '@nivo/legends';
import { TooltipProps } from './CellTooltip';
export declare type DatumId = string | number;
export declare type DatumLabel = string | number;
export declare type DatumValue = number;
export declare type DatumFormattedValue = string | number;
export interface Datum {
    id: DatumId;
    label: DatumLabel;
    value: DatumValue;
}
export interface DefaultRawDatum extends Datum {
    id: string;
    label: string;
    value: number;
}
export declare type ValueFormatter = (value: number) => DatumFormattedValue;
export interface ComputedDatum<RawDatum> extends Datum {
    formattedValue: DatumFormattedValue;
    groupIndex: number;
    startAt: number;
    endAt: number;
    color: string;
    fill?: string;
    data: RawDatum;
}
export interface EmptyCell {
    position: number;
    row: number;
    column: number;
    x: number;
    y: number;
    color: string;
}
export interface DataCell<RawDatum extends Datum> extends EmptyCell {
    data: ComputedDatum<RawDatum>;
}
export declare type Cell<RawDatum extends Datum> = EmptyCell | DataCell<RawDatum>;
export declare const isDataCell: <RawDatum extends Datum>(cell: Cell<RawDatum>) => cell is DataCell<RawDatum>;
export declare type FillDirection = 'top' | 'right' | 'bottom' | 'left';
export interface DataProps<RawDatum extends Datum> {
    data: RawDatum[];
    total: number;
    rows: number;
    columns: number;
}
export interface CommonProps<RawDatum extends Datum> {
    margin: Box;
    valueFormat?: string | ValueFormatter;
    fillDirection: FillDirection;
    padding: number;
    theme: Theme;
    colors: OrdinalColorScaleConfig<RawDatum>;
    emptyColor: string;
    emptyOpacity: number;
    borderWidth: number;
    borderColor: InheritedColorConfig<Cell<RawDatum>>;
    isInteractive: boolean;
    tooltip: React.FC<TooltipProps<RawDatum>>;
    role: string;
}
export declare type MouseHandler<RawDatum extends Datum, ElementType = HTMLCanvasElement> = (cell: Cell<RawDatum>, event: React.MouseEvent<ElementType>) => void;
interface MouseHandlers<RawDatum extends Datum, ElementType = HTMLCanvasElement> {
    onClick?: MouseHandler<RawDatum, ElementType>;
    onMouseEnter?: MouseHandler<RawDatum, ElementType>;
    onMouseMove?: MouseHandler<RawDatum, ElementType>;
    onMouseLeave?: MouseHandler<RawDatum, ElementType>;
}
export declare type LayerId = 'cells' | 'legends';
export interface CustomLayerProps<RawDatum extends Datum> {
    yay?: RawDatum;
}
export declare type SvgLayer<RawDatum extends Datum> = LayerId | React.FC<CustomLayerProps<RawDatum>>;
export declare type SvgProps<RawDatum extends Datum = DefaultRawDatum> = DataProps<RawDatum> & Dimensions & Partial<CommonProps<RawDatum>> & {
    layers?: SvgLayer<RawDatum>[];
} & ModernMotionProps & SvgDefsAndFill<ComputedDatum<RawDatum>> & {
    legends?: LegendProps[];
} & MouseHandlers<RawDatum>;
export declare type HtmlLayerId = Exclude<LayerId, 'legends'>;
export declare type HtmlLayer<RawDatum extends Datum> = HtmlLayerId | React.FC<CustomLayerProps<RawDatum>>;
export declare type HtmlProps<RawDatum extends Datum = DefaultRawDatum> = DataProps<RawDatum> & Dimensions & Partial<CommonProps<RawDatum>> & {
    layers?: HtmlLayer<RawDatum>[];
} & ModernMotionProps & MouseHandlers<RawDatum>;
export declare type CanvasProps<RawDatum extends Datum = DefaultRawDatum> = DataProps<RawDatum> & Dimensions & Partial<CommonProps<RawDatum>> & {
    legends?: LegendProps[];
} & {
    pixelRatio?: number;
} & Omit<MouseHandlers<RawDatum>, 'onMouseEnter' | 'onMouseLeave'>;
export {};
//# sourceMappingURL=types.d.ts.map