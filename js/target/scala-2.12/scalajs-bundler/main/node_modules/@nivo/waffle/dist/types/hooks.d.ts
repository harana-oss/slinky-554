import { CommonProps, ComputedDatum, Datum, DefaultRawDatum, DataProps, FillDirection, EmptyCell, Cell } from './types';
/**
 * Computes optimal cell size according to dimensions/layout/padding.
 */
export declare const computeCellSize: (width: number, height: number, rows: number, columns: number, padding: number) => number;
/**
 * Computes empty cells according to dimensions/layout/padding.
 * At this stage the cells aren't bound to any data.
 */
export declare const computeGrid: (width: number, height: number, rows: number, columns: number, fillDirection: FillDirection, padding: number, emptyColor: string) => {
    cells: EmptyCell[];
    cellSize: number;
    origin: {
        x: number;
        y: number;
    };
};
export declare const useWaffle: <RawDatum extends Datum = DefaultRawDatum>({ width, height, data, valueFormat, total, rows, columns, fillDirection, padding, colors, emptyColor, borderColor, }: Pick<CommonProps<RawDatum>, "valueFormat" | "fillDirection" | "padding" | "colors" | "emptyColor" | "borderColor"> & DataProps<RawDatum> & {
    width: number;
    height: number;
}) => {
    grid: {
        cells: EmptyCell[];
        cellSize: number;
        origin: {
            x: number;
            y: number;
        };
    };
    computedData: ComputedDatum<RawDatum>[];
    legendData: {
        id: import("./types").DatumId;
        label: import("./types").DatumId;
        color: string;
    }[];
    getBorderColor: (d: Cell<RawDatum>) => any;
};
export declare const mergeCellsData: <RawDatum extends Datum>(cells: EmptyCell[], data: ComputedDatum<RawDatum>[]) => Cell<RawDatum>[];
export declare const useMergeCellsData: <RawDatum extends Datum = DefaultRawDatum>(cells: EmptyCell[], data: ComputedDatum<RawDatum>[]) => Cell<RawDatum>[];
//# sourceMappingURL=hooks.d.ts.map